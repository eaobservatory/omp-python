#!/local/python/bin/python2

# Copyright (C) 2014 Science and Technology Facilities Council.
# Copyright (C) 2016 East Asian Observatory.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import logging

from omp.tle.space_track import SpaceTrack
from omp.tle.parse import TLEParser
from omp.db.part.tle import TLEDB

import sys

parser = argparse.ArgumentParser(description="""
Script to update AUTO-TLE coordinates in the OMP database.

For each AUTO-TLE target name in the database, the current TLE is
retrieved from space-track.org and stored in the omptle table.
Then all the AUTO-TLE records in the ompobs table for this
target are updated with the new element values.
""")

parser.add_argument(
    '--verbose', '-v',
    required=False, default=False, action='store_true',
    help='Output debugging information')
parser.add_argument(
    '--dev',
    required=False, default=False, action='store_true',
    help='Use development test database (devomp)')
parser.add_argument(
    '--dry-run', '-n',
    required=False, default=False, action='store_true',
    help='Do not write the results into the database')
parser.add_argument(
    '--include-removed',
    required=False, default=False, action='store_true',
    help='Include TLEs from MSBs without repeats remaining')

args = parser.parse_args()

if args.dev:
    print("'dev' mode currently not supported")
    sys.exit(1)

logging.basicConfig(level=(logging.DEBUG if args.verbose else logging.INFO))
logger = logging.getLogger('update_auto_tle')

strack = SpaceTrack()
parse = TLEParser() #tletype="NORAD" as default
omp = TLEDB(read_only=args.dry_run)

errors = []

logger.info('Fetching TLE IDs from OMP')
ids = omp.retrieve_ids(include_removed=args.include_removed)

for cat_id in ids:
	if not cat_id.startswith("NORAD"):
		logger.warning('Bad TLE ID {0}'.format(cat_id))
		errors.append(cat_id)
		continue
	cat_id = cat_id[5:]

	logger.debug('Adding to list NORAD TLE ID {0}'.format(cat_id))
	strack.add_id(cat_id)

logger.info('Sending SpaceTrack request')
tles = strack.send_request()

line1 = ""
line2 = ""
flag = 0

logger.info('Reading SpaceTrack response')
for tle in tles:
	logger.debug('Got TLE line: {0}'.format(tle))

	if flag == 1:
		line2 = tle

		try:
			parsed = parse.parse_tle(line1, line2)
			ex_tle = parse.export_tle_omp(parsed)
		except ValueError as e:
			errors.append(e.message)
			continue

		if not args.dry_run:
			logger.debug('Submitting TLE to OMP omptle table')
			omp.submit_tle(ex_tle)

			logger.debug('Updating TLE in OMP ompobs table')
			omp.update_tle_ompobs(ex_tle)

		else:
			logger.info('Not writing "%s" to the database [DRY RUN]',
				    ex_tle['target'])

		flag = 0
	elif flag == 0:
		line1 = tle
		flag = 1

if len(errors) != 0:
	err_str = "Errors encountered" + ", ".join(errors)
	sys.exit(err_str)
