#!/local/python/bin/python2

import argparse
import logging

import omp.tle.spaceTracker as spaceTracker
import omp.tle.parseTLE as parseTLE
import omp.tle.tle_omp as tle_omp

import sys

parser = argparse.ArgumentParser(description="""
Script to update AUTO-TLE coordinates in the OMP database.

For each AUTO-TLE target name in the database, the current TLE is
retrieved from space-track.org and stored in the omptle table.
Then all the AUTO-TLE records in the ompobs table for this
target are updated with the new element values.
""")

parser.add_argument(
    '--verbose', '-v',
    required=False, default=False, action='store_true',
    help='Output debugging information')
parser.add_argument(
    '--dev',
    required=False, default=False, action='store_true',
    help='Use development test database (devomp)')

args = parser.parse_args()

logging.basicConfig(level=(logging.DEBUG if args.verbose else logging.INFO))
logger = logging.getLogger('tle_script')

strack = spaceTracker.SpaceTrack()
parse = parseTLE.TLEParser() #tletype="NORAD" as default
omp = tle_omp.TLE_OMP(omp=("devomp" if args.dev else 'omp'))

errors = []

logger.info('Fetching TLE IDs from OMP')
ids = omp.retrieve_ids()

for cat_id in ids:
	if not cat_id.startswith("NORAD"):
		logger.warning('Bad TLE ID {0}'.format(cat_id))
		errors.append(cat_id)
		continue
	cat_id = cat_id[5:]

	logger.debug('Adding to list NORAD TLE ID {0}'.format(cat_id))
	strack.add_id(cat_id)

logger.debug('Building SpaceTrack request')
strack.build_request()

logger.info('Sending SpaceTrack request')
tles = strack.send_request()

line1 = ""
line2 = ""
flag = 0

logger.info('Reading SpaceTrack response')
for tle in tles.splitlines():
	logger.debug('Got TLE line: {0}'.format(tle))

	if flag == 1:
		line2 = tle
		parsed = parse.parse_tle(line1, line2)
		if parsed is None:
			continue
		ex_tle = parse.export_tle_omp(parsed)

		logger.debug('Submitting TLE to OMP omptle table')
		omp.submit_tle(ex_tle)

		logger.debug('Updating TLE in OMP ompobs table')
		omp.update_tle_ompobs(ex_tle)

		flag = 0
	elif flag == 0:
		line1 = tle
		flag = 1

if len(errors) != 0:
	err_str = "Errors encountered" + ", ".join(errors)
	sys.exit(err_str)
